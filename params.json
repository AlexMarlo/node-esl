{"tagline":"FreeSWITCH ESL implementation for Node.js; implements the full Event Socket Library specified in:","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Node-esl","body":"## FreeSWITCH ESL Bindings for Node.js\r\n\r\nA Library for handling low-level FreeSWITCH ESLconnections, and associated ESLevents.\r\n\r\n[Documentation](https://github.com/englercj/node-esl/wiki) - [Event Socket Library Spec](http://wiki.freeswitch.org/wiki/Esl)\r\n\r\n### Purpose\r\n\r\nThough there is already a Node.js \"library\" for this [on github](https://github.com/shimaore/esl),\r\nit does not actually implement the [Event Socket Library](http://wiki.freeswitch.org/wiki/Event_Socket_Library)\r\ninterface, and instead has it's own thing. This library was written to implement the full Event\r\nSocket Library interface, and provide a meaningful semantic when dealing with FreeSWITCH in Node.js.\r\n\r\nThis library supports both \"Inbound\" (connection going _into_ FreeSWITCH) and \"Outbound\" (connections\r\ncoming _out_ of FreeSWITCH). Also included is a helper `esl.Server` object that manages multiple\r\n`esl.Connection` objects; making it trivial to have multiple \"Outbound\" connections from FreeSWITCH.\r\n\r\n### Installation\r\n\r\nThe easiest way to install is via npm:\r\n\r\n```shell\r\nnpm install modesl\r\n```\r\n\r\nAs in \"Mod ESL\".\r\n\r\n### Usage\r\n\r\nThe most basic usage example is to open a connection, and send a status command:\r\n\r\n```javascript\r\nvar esl = require('modesl'),\r\nconn = new esl.Connection('127.0.0.1', 8021, 'ClueCon', function() {\r\n    conn.api('status', function(res) {\r\n        //res is an esl.Event instance\r\n        console.log(res.getBody());\r\n    });\r\n});\r\n```\r\n\r\nSomething to be aware of is that _all_ functions that interact with FreeSWITCH are asynchronous on the Library side.\r\nHowever, there are many functions (`api`, `execute`, etc) that are synchronous on the FreeSWITCH side. Because of this\r\nthe event you will get back in your callback on, for example, `api` and the same command on `bgapi` will be different.\r\n\r\nThe `api` command's callback will be executed immediately when the `command/reply` message is received, with all the\r\nreturned data. However, that same command using `bgapi` will _not_ call the callback when the `command/reply` message\r\nis received, this is because FreeSWITCH returns the `command/reply` message immediately for background commands __before\r\nthe command is run__. The Library will automatically track the command, and call the callback on the `BACKGROUND_JOB`\r\nmessage that denotes a completed Background Job.\r\n\r\nThe body for the same command issued with `api` and `bgapi` should be the same; even when the headers, event type, and\r\ntime it takes for the callback to execute are different. The Library attempts to smooth these differences out by providing\r\na common interface, even though behind the scenes things are quite different.\r\n\r\n### Tests\r\n\r\nTo run the tests included with the module simply run the following in the root of the `modesl` folder:\r\n\r\n```shell\r\nnpm test\r\n```\r\n\r\n### TODO\r\n\r\n - Add tests for \r\n  * `esl.Connection`\r\n - Add more examples for\r\n  * IVR App\r\n  * Faxing App\r\n - Add more abstraction/sugar functions\r\n - Better error messages on `error` event\r\n\r\n### License\r\n\r\nThis module is distributed under the [Mozilla Public License 2.0](http://www.mozilla.org/MPL/2.0/)."}